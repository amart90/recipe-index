---
title: "Recipe Browser"
format: html
---

```{r setup, include=FALSE}
library(googlesheets4)
library(dplyr)
library(reactable)
library(crosstalk)
library(htmltools)
library(janitor)

# Read data from Google Sheet
data <- read_sheet(
  "1q57RAlUtp5dcjQjllqTWAm9K1xbL8nrfjjvH2IQmbGM",
  sheet = "Recipe table"
) %>%
  clean_names()

# SharedData object for Crosstalk
shared_data <- SharedData$new(data)

# Custom Crosstalk select filter
select_filter <- function(id, label, shared_data, group) {
  values <- shared_data$data()[[group]]
  keys <- shared_data$key()
  keys_by_value <- split(seq_along(keys), values)
  choices <- sort(unique(values))

  script <- sprintf("
    window['__ct__%s'] = (function() {
      const handle = new window.crosstalk.FilterHandle('%s')
      const keys = %s
      return {
        filter: function(value) {
          if (!value) {
            handle.clear()
          } else {
            handle.set(keys[value])
          }
        }
      }
    })()
  ", id, shared_data$groupName(), jsonlite::toJSON(keys_by_value))

  div(
    class = "filter-input",
    tags$label(`for` = id, label),
    tags$select(
      id = id,
      onchange = sprintf("window['__ct__%s'].filter(this.value)", id),
      tags$option(value = "", "All"),
      lapply(choices, function(value) tags$option(value = value, value))
    ),
    tags$script(HTML(script))
  )
}

# Crosstalk search filter
search_filter <- function(id, label, shared_data, group) {
  values <- as.list(shared_data$data()[[group]])
  values_by_key <- setNames(values, shared_data$key())

  script <- sprintf("
    window['__ct__%s'] = (function() {
      const handle = new window.crosstalk.FilterHandle('%s')
      const valuesByKey = %s
      return {
        filter: function(value) {
          if (!value) {
            handle.clear()
          } else {
            const regex = new RegExp(value, 'i')
            const filtered = Object.keys(valuesByKey).filter(function(key) {
              return regex.test(valuesByKey[key])
            })
            handle.set(filtered)
          }
        }
      }
    })()
  ", id, shared_data$groupName(), jsonlite::toJSON(values_by_key))

  div(
    class = "filter-input",
    tags$label(`for` = id, label),
    tags$input(
      id = id,
      type = "search",
      oninput = sprintf("window['__ct__%s'].filter(this.value)", id)
    ),
    tags$script(HTML(script))
  )
}
```

## Filter and Search Recipes

```{r filters-and-table, include=FALSE}
filters <- div(
  class = "filters",
  search_filter("search_name", "Search by Name", shared_data, "name"),
  select_filter("filter_type", "Type", shared_data, "type"),
  select_filter("filter_cuisine", "Cuisine", shared_data, "cuisine"),
  select_filter("filter_tool", "Tool", shared_data, "tool")
)

recipe_table <- reactable(
  shared_data,
  columns = list(
    name = colDef(name = "Name"),
    book = colDef(name = "Book"),
    page = colDef(name = "Page"),
    type = colDef(name = "Type"),
    cuisine = colDef(name = "Cuisine"),
    tool = colDef(name = "Tool")
  ),
  searchable = FALSE,
  pagination = TRUE,
  defaultPageSize = 10,
  highlight = TRUE
)
```

```{r echo=FALSE}
div(filters, tags$hr(), recipe_table)
```